% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/redshift-replace.R
\name{rs_replace_table}
\alias{rs_replace_table}
\title{Replace or upsert redshift table}
\usage{
rs_replace_table(data, dbcon, tableName, split_files,
  bucket = Sys.getenv("AWS_BUCKET_NAME"),
  region = Sys.getenv("AWS_DEFAULT_REGION"), access_key = NULL,
  secret_key = NULL, remove_quotes = TRUE, strict = TRUE,
  use_transaction = TRUE)
}
\arguments{
\item{data}{a data frame}

\item{dbcon}{an RPostgres connection to the redshift server}

\item{tableName}{the name of the table to replace}

\item{split_files}{optional parameter to specify amount of files to split into. If not specified will look at amount of slices in Redshift to determine an optimal amount.}

\item{bucket}{the name of the temporary bucket to load the data. Will look for AWS_BUCKET_NAME on environment if not specified.}

\item{region}{the region of the bucket. Will look for AWS_DEFAULT_REGION on environment if not specified.}

\item{access_key}{the access key with permissions for the bucket. Will look for AWS_ACCESS_KEY_ID on environment if not specified.}

\item{secret_key}{the secret key with permissions fot the bucket. Will look for AWS_SECRET_ACCESS_KEY on environment if not specified.}
}
\description{
Upload a table to S3 and then load it with redshift, replacing the contents of that table.
The table on redshift has to have the same structure and column ordering to work correctly.
}
\examples{
library(DBI)

a=data.frame(a=seq(1,10000), b=seq(10000,1))

\dontrun{
con <- dbConnect(RPostgres::Postgres(), dbname="dbname",
host='my-redshift-url.amazon.com', port='5439',
user='myuser', password='mypassword',sslmode='require')

rs_replace_table(data=a, dbcon=con, tableName='testTable',
bucket="my-bucket", split_files=4)

}
}
